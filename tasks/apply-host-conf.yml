- name: Adding new nodes | Check files
  delegate_to: localhost
  register: generic_file
  ansible.builtin.stat:
    path: '{{ inventory_dir }}/{{ generic_machineconfig }}'

- name: Adding new nodes | Check variables
  assert:
    fail_msg: generic_machineconfig should point to either worker.yaml nor controlplane.yml
    that:
    - generic_machineconfig is defined
    - generic_machineconfig | length > 0
    - generic_file.stat.exists is true
    - generic_file.stat.isreg is true

- name: Adding new nodes | Check if a custom file exists
  delegate_to: localhost
  register: result
  ansible.builtin.stat:
    path: '{{ inventory_dir }}/{{ inventory_hostname }}.host.yaml'

- name: Adding new nodes | Set facts
  set_fact:
    manifest: '{{ inventory_dir }}/{% if result.stat.exists %}{{ inventory_hostname }}.host.yaml{% else %}{{ generic_machineconfig }}{% endif %}'
    talosctl_opts: --insecure --talosconfig {{ inventory_dir }}/talosconfig -n {{ ansible_host | default(inventory_hostname) }}
    talosctl_patch_opts: --talosconfig {{ inventory_dir }}/talosconfig -n {{ inventory_hostname }} -e {{ ansible_host | default(inventory_hostname) }}

- name: Adding new nodes | Applying the configuration to the new node
  delegate_to: localhost
  ansible.builtin.command: talosctl apply-config {{ talosctl_opts }} --file {{ manifest }}
  environment:
    no_proxy: "{{ ansible_host | default(inventory_hostname) }}"

- name: Adding new nodes | Patch the machine configuration to add extensions
  delegate_to: localhost
  delay: 10
  retries: 10
  register: patch
  until: patch is success
  with_fileglob:
  - "{{ inventory_dir }}/day-1/extensions/*.yml"
  - "{{ inventory_dir }}/day-1/extensions/*.yaml"
  ansible.builtin.command: talosctl patch mc {{ talosctl_patch_opts }} --patch @{{ item }}
  environment:
    no_proxy: "{{ ansible_host | default(inventory_hostname) }}"

- name: Adding new nodes | Pause for {{ waiting_time_minutes }} minutes to let the machine download the images
  when:
  - adding_node is undefined
  - ansible_play_hosts | length > 1
  ansible.builtin.pause:
    minutes: '{{ waiting_time_minutes }}'
    prompt: |
      Wait {{ waiting_time_minutes }} minutes between nodes to let them install.
      This is useful when nodes are slow to reboot or in case of a bad internet connectivity.

- name: Adding new nodes | Waiting for the node to be available
  when:
  - adding_node is defined
  - adding_node is true
  delegate_to: localhost
  until: result is success
  register: result
  retries: 30
  delay: 60
  changed_when: false
  ansible.builtin.shell: kubectl get nodes {{ ansible_host | default(inventory_hostname) }}
  environment:
    no_proxy: "{{ ansible_host | default(inventory_hostname) }}"
